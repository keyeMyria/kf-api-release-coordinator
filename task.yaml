swagger: "2.0"
info:
  version: "1.0.0"
  title: "Kids First Release Coordinator Task Service"
  description: |
    ## Task Service

    A task service runs a function that is a step in the release process such as: Rolling over version numbers, updating file states for download, and making new data visible to users. These tasks should expose a common interface for the Coordination Service to communicate with. A task service should implement the endpoints in this specification in order for the release coordinator to properly invoke tasks.
    
    ### Task States
    
    A task traverses from state to state as it completes actions 

  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "kids-first.io"
basePath: "/"
tags:
- name: "Tasks"
  description: "Operations provided by a service that is responsible for a given task"
schemes:
- "http"
paths:
  /status:
    get:
      tags:
        - "Tasks"
      summary: "Get information about the service"
      description: "Returns information about the Release Coordinator"
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Releases found"
          schema:
            $ref: "#/definitions/Status"
  /tasks:
    post:
      tags:
        - "Tasks"
      summary: "RPC endpoint for task actions"
      description: |
        Starts an action for a task.

        When a release is begun, the Release Coordinator service will call
        downstream tasks with an `initialize` action. The Coordinator will
        expect an ok response to continue with the release process. If any
        non-200 response is returned, the Coordinator will cancel the release.

        Once the Coordinator has verified that all tasks are ready for work,
        it will issue a `start` action signaling the task to begin work.

        Once work is completed, the task should reach a `staged` state.

        The Coordinator will issue a `publish` action to the task when it is
        time for the release to be made public.

        If the release is ever halted due to an explicit stop or because
        of a failure in another task, the Coordinator will issue a `cancel`
        action informing the task to stop or discard any operations.

        To summarize, the possible actions are:

        - `initialize`
        - `start`
        - `publish`
        - `cancel`

      operationId: "startTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task action"
        required: true
        schema:
          $ref: "#/definitions/TaskAction"
      responses:
        200:
          description: "Task accepted"
          schema:
            $ref: "#/definitions/TaskResponse"
        503:
          description: "Task rejected"
          schema:
            $ref: "#/definitions/ApiResponse"
  /tasks/{taskId}:
    get:
      tags:
      - "Tasks"
      summary: "Returns state of a task given its id"
      description: |
        Returns the information of a task given its id.
        The task service should return information regarding the current state
        of the task.

        The state of the task depends on the where it is in its lifecycle:

        - `pending` - Recieved the `initilize` action, but waiting for `start`
        - `running` - After `start` action while the task is processing
        - `staged` - After completing work
        - `publishing` - While publicizing work
        - `published` - After successfully publishing
        - `canceled` - Task was canceled by coordinator
        - `failed` - Task failed at some stage

      operationId: "getTaskById"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
        format: "string"
      responses:
        200:
          description: "found task"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    delete:
      tags:
      - "Tasks"
      summary: "Cancel a task"
      description: "Cancels a task if it is running"
      operationId: "cancelTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to cancel"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Task canceled"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
definitions:
  Status:
    properties:
      branch:
        description: "API branch name"
        example: "master"
        type: "string"
      code:
        description: "HTTP response code"
        example: 200
        format: "int32"
        type: "integer"
      commit:
        description: "API short commit hash"
        example: "aef3b5a"
        type: "string"
      message:
        description: "status message"
        example: "success"
        type: "string"
      tags:
        items:
          description: "Any tags associated with the version"
          example: "rc"
          type: "string"
        type: "array"
      version:
        description: "API version number"
        example: "2.0.4"
        type: "string"
  Task:
    properties:
      name:
        type: "string"
        format: "string"
        example: "data model rollover"
      kf_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
      release_id:
        type: "string"
        format: "string"
        example: "RE_AB28FG90"
      state:
        type: "string"
        format: "string"
        example: "running"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
  TaskState:
    properties:
      state:
        type: "string"
        format: "string"
        example: "running"
  TaskAction:
    properties:
      action:
        type: "string"
        format: "string"
        example: "start"
      task_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
  TaskResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Task'
  Release:
    properties:
      kf_id:
        type: "integer"
        format: "int64"
        example: "RE_00000001"
      state:
        type: "string"
        format: "string"
        example: "running"
      version:
        type: "string"
        format: "string"
        example: "3.0.0"
      study_id:
        type: "string"
        format: "string"
        example: "ST_00000001"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
  ReleaseResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Release'
  ApiResponse:
    properties:
      _links:
        type: "object"
        properties:
          self:
            type: "string"
            format: "string"
            example: "/resource/{resourceId}"
      _status:
        type: "object"
        properties:
          code:
            type: "integer"
            format: "int32"
            example: 200
          message:
            type: "string"
            format: "string"
            example: "success"
