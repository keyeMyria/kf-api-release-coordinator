swagger: "2.0"
info:
  version: "1.0.0"
  title: "Kids First Release Coordinator Task Service"
  description: |
    ## Task Service

    A task service runs a function that is a step in the release process
    such as: Rolling over version numbers, updating file states for download,
    and making new data visible to users. These tasks should expose a common
    interface for the Coordination Service to communicate with. A task service
    should implement the endpoints in this specification in order for the
    release coordinator to properly invoke tasks.


    ## Task timeline

    1) recieve `init` action from coordinator and move to `pending` state

    2) recieve `start` action from coordinator and move to `running` state

    3) optionally update coordinator with progress

    4) complete processing and move from `running` to `staged`

    5) update coordinator with current state, or wait for coordinator status check

    6) recieve `publish` from coordinator and run final actions to make data public


  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "kids-first.io"
basePath: "/"
schemes:
- "http"
paths:
  /status:
    get:
      summary: "Get information about the service"
      description: |
        Returns information about the Task service including the current
        status. This endpoint is used by the Coordinator to determine the health
        of the task service. Any non-200 response will imply that the service
        is unavailable and any tasks that may have been issued to the service
        will be assumed as failed, if enough consective non-200 responses
        are recieved.

      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Service ok"
          schema:
            $ref: "#/definitions/Status"
        4XX:
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Status"
  /tasks:
    post:
      summary: "Task action RPC"
      description: |
        Starts an action for a task.

        When a release is begun, the Release Coordinator service will call
        downstream tasks with an `initialize` action. The Coordinator will
        expect an ok response to continue with the release process. If any
        non-200 response is returned, the Coordinator will cancel the release.

        Once the Coordinator has verified that all tasks are ready for work,
        it will issue a `start` action signaling the task to begin work.

        Once work is completed, the task should reach a `staged` state.

        The Coordinator will issue a `publish` action to the task when it is
        time for the release to be made public.

        If the release is ever halted due to an explicit stop or because
        of a failure in another task, the Coordinator will issue a `cancel`
        action informing the task to stop or discard any operations.

        To summarize, the possible actions are:

        - `initialize`
        - `start`
        - `publish`
        - `cancel`

      operationId: "taskAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task action"
        required: true
        schema:
          $ref: "#/definitions/TaskAction"
      responses:
        200:
          description: "Task accepted"
          schema:
            $ref: "#/definitions/Task"
        503:
          description: "Task rejected"
  /tasks/{taskId}:
    get:
      summary: "Task state"
      description: |
        Returns the information of a task given its id.
        The task service should return information regarding the current state
        of the task.

        The state of the task depends on the where it is in its lifecycle:

        - `pending` - Recieved the `initilize` action, but waiting for `start`
        - `running` - After `start` action while the task is processing
        - `staged` - After completing work
        - `publishing` - While publicizing work
        - `published` - After successfully publishing
        - `canceled` - Task was canceled by coordinator
        - `failed` - Task failed at some stage

      operationId: "getTaskById"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
        format: "string"
      responses:
        200:
          description: "found task"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
definitions:
  Status:
    properties:
      name:
        description: "name of the service"
        example: "datamodel rollover"
        type: "string"
      message:
        description: "status message"
        example: "ready for work"
        type: "string"
      version:
        description: "Task version number"
        example: "2.0.4"
        type: "string"
  Task:
    properties:
      name:
        type: "string"
        format: "string"
        example: "data model rollover"
      kf_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
      release_id:
        type: "string"
        format: "string"
        example: "RE_AB28FG90"
      state:
        type: "string"
        format: "string"
        example: "running"
      progress:
        type: "string"
        format: "string"
        example: "50%"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
  TaskAction:
    properties:
      action:
        type: "string"
        format: "string"
        example: "start"
      task_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
