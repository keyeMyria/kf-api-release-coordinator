swagger: "2.0"
info:
  version: "1.0.0"
  title: "Kids First Release Coordinator Task Service"
  description: |
    ## Task Service

    A task service runs a function that is a step in the release process
    such as: Rolling over version numbers, updating file states for download,
    and making new data visible to users. These tasks should expose a common
    interface for the Coordination Service to communicate with. A task service
    should implement the endpoints in this specification in order for the
    release coordinator to properly invoke tasks.


    ## Task Sequence of Operations
    Below is a basic overview of a task's expected sequence of operations and its states. See the sequence diagram \<link here\> for a detailed specification of the interaction between the Coordinator Service and a Task Service.

    1) Receive `initialize` action from coordinator and move to `pending` state. Respond to coordinator with state set to `pending`. This is important since the coordinator will not send the `start` action until all tasks within the release are in `pending` state.

    2) Receive `start` action from coordinator and move to `running` state. Respond to coordinator with state set to `running`.

    3) (Optional) Update coordinator with current progress as the task does its work.

    4) Complete processing and change state from `running` to `staged`

    5) Update coordinator with current state. This is import since the coordinator will not send the `publish` action until all tasks within the release have sent a request with state set to `staged`.

    6) Recieve `publish` from coordinator and run final actions to make data public


  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "kids-first.io"
basePath: "/"
schemes:
- "http"
paths:
  /status:
    get:
      summary: "Get information or health status of service"
      description: |
        Returns information about the Task service including the current
        status. This endpoint is used by the Coordinator to determine the health
        of the task service. Any non-200 response will imply that the service
        is unavailable. If enough consective non-200 responses
        are recieved by the Coordinator, then any tasks that may have been issued to the task service
        will be assumed as failed.

      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Service ok"
          schema:
            $ref: "#/definitions/Status"
        503:
          description: "Service unavailable"
          schema:
            $ref: "#/definitions/Status"
  /tasks:
    post:
      summary: "Task initialization"
      description: |
        When a release is begun, the Release Coordinator service will send a POST to this endpoint with an `initialize` action. The Coordinator will expect an ok response from all task services in the release to continue with the release process.

        If any non-200 response is returned, the Coordinator will cancel the release.

        Once the Coordinator has verified that all tasks are ready for work,
        it will signal the task service to begin work via a PATCH with action set to `start`.

        To summarize, the possible actions in a POST to this endpoint are:

        - `initialize`

      operationId: "taskInit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task action"
        required: true
        schema:
          $ref: "#/definitions/TaskAction"
      responses:
        200:
          description: "Task accepted"
          schema:
            $ref: "#/definitions/Task"
        503:
          description: "Task rejected"

  /tasks/{taskId}:
    parameters:
    - name: "taskId"
      in: "path"
      description: "ID of task to return"
      required: true
      type: "string"
      format: "string"

    patch:
      summary: "Task action RPC "
      description: |
        The Release Coordinator service will send a PATCH to this endpoint to communicate actions that the task service must execute. The Coordinator will expect an ok response from all task services in the release to continue with the release process.

        If any non-200 response is returned, the Coordinator will cancel the release.

        A this point the Coordinator has send out the `initialize` action via a POST and verified that all tasks are ready for work based on their responses. Next, the Coordinator will signal the task service to begin work via a PATCH with action set to `start`.

        Once work is completed, the task should reach a `staged` state and task service should notify the Coordinator with its new state.

        When its time for the data release to be made public, the Coordinator will signal the task service to begin publishing via a PATCH to this endpoint with action set to `publish`.

        If the release is ever halted due to an explicit stop or because
        of a failure in any task, the Coordinator will issue a `cancel`
        action informing the task to stop or discard any operations.

        To summarize, the possible actions in a PATCH to this endpoint are:

        - `start`
        - `publish`
        - `cancel`

      operationId: "taskAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task action"
        required: true
        schema:
          $ref: "#/definitions/TaskAction"
      responses:
        200:
          description: "Task accepted"
          schema:
            $ref: "#/definitions/Task"
        503:
          description: "Task rejected"

    get:
      summary: "Task state"
      description: |
        Returns the information of a task given its id.
        The task service should return information regarding the current state
        of the task.

        The state of the task depends on the where it is in its lifecycle:

        - `pending` - Recieved the `initialize` action, but waiting for `start`
        - `running` - After `start` action while the task is processing
        - `staged` - After completing work
        - `publishing` - While publicizing work
        - `published` - After successfully publishing
        - `canceled` - Task was canceled by coordinator
        - `failed` - Task failed at some stage

      operationId: "getTaskById"
      produces:
      - "application/json"

      responses:
        200:
          description: "found task"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
definitions:
  Status:
    properties:
      name:
        description: "name of the service"
        example: "datamodel rollover"
        type: "string"
      message:
        description: "status message"
        example: "ready for work"
        type: "string"
      version:
        description: "Task version number"
        example: "2.0.4"
        type: "string"
  Task:
    properties:
      name:
        type: "string"
        format: "string"
        example: "data model rollover"
      kf_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
      release_id:
        type: "string"
        format: "string"
        example: "RE_AB28FG90"
      state:
        type: "string"
        format: "string"
        example: "running"
      progress:
        type: "string"
        format: "string"
        example: "50%"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
  TaskAction:
    properties:
      action:
        type: "string"
        format: "string"
        example: "start"
      task_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
      release_id:
        type: "string"
        format: "string"
        example: "RE_AB28FG90"
  TaskInit:
    properties:
      action:
        type: "string"
        format: "string"
        example: "initialize"
      task_id:
        type: "string"
        format: "string"
        example: "TA_3G2409A2"
