wagger: "2.0"
info:
  version: "1.0.0"
  title: "Kids First Release Coordinator"
  description: |
    The Kids First Release Coordination brings different services in the Kids First ecosystem together to release data in a syncrhonized manner. It consists of two types of services: The Coordinator Service and Task Services.
    
    ## Coordinator Service
      
    The Coordination Service is responsible for issueing new releases and keeping tabs on progress between the different task services. 
    
    ## Task Service
    
    A task service runs a function that is a step in the release process such as: Rolling over version numbers, updating file states for download, and making new data visible to users. These tasks should expose a common interface for the Coordination Service to communicate with.
    
    ### Release and Task Stages
    
    Releases and tasks share a common lifecycle of states:
    
    - `pending` - The task is queued to begin
    - `running` - The task or release in in progress
    - `staged` - The task or release has compleded necessary processing
    - `completed` - The task or release has completed or released successfully
    - `failed` - The task or release has failed do to some error
    - `canceled` - The task or release was canceled by a user
    
    
  termsOfService: ""
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "kids-first.io"
basePath: "/"
tags:
- name: "Releases"
  description: "Operations provided by the coordinating service overseeing a number of tasks"
- name: "Tasks"
  description: "Operations provided by a service that is responsible for a given task"
schemes:
- "http"
paths:
  /releases:
    get:
      tags:
        - "Releases"
      summary: "Get information about releases"
      description: "Returns information about releases performed by the Release Coordinator"
      operationId: "getReleases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Releases found"
          schema:
            $ref: "#/definitions/ReleaseResponse"
    post:
      tags:
        - "Releases"
      summary: "Create a new release"
      description: |
        The Coordinator will create a new release for the given studies and tag it with an appropriate release version. It will then invoke 
      operationId: "createRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Release started"
          schema:
            $ref: "#/definitions/ReleaseResponse"
    delete:
      tags:
        - "Releases"
      summary: "Cancel a release"
      description: |
        Cancels a release that is pending, running, or staged. If there are pending or running tasks, the coordinator will attempt to stop them. 
      operationId: "cancelRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Release canceled"
          schema:
            $ref: "#/definitions/ApiResponse"
  /releases/{releaseId}:
    get:
      tags:
        - "Releases"
      summary: "Get detailed information about a release"
      description: "Returns a detailed view of a release performed by the Release Coordinator"
      operationId: "getRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "releaseId"
        in: "path"
        description: "ID of the release to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Release found"
          schema:
            $ref: "#/definitions/ReleaseResponse"
        404:
          description: "Release not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /releases/{releaseId}/tasks/{taskId}:
    parameters:
    - name: "releaseId"
      in: "path"
      description: "ID of the release the task is in"
      required: true
      type: "integer"
      format: "int64"
    - name: "taskId"
      in: "path"
      description: "ID of the task to return"
      required: true
      type: "integer"
      format: "int64"
    get:
      tags:
        - "Releases"
      summary: "Get detailed information about a release"
      description: "Returns a detailed view of a release performed by the Release Coordinator"
      operationId: "getReleaseTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Task found"
          schema:
            $ref: "#/definitions/TaskResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
        - "Releases"
      summary: "Update information about a release's task"
      description: "Used to update the state of a task in a release, typically by the task itself"
      operationId: "updateReleaseTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated state"
        required: true
        schema:
          $ref: "#/definitions/TaskState"
      responses:
        200:
          description: "Task found"
          schema:
            $ref: "#/definitions/TaskResponse"
        400:
          description: "Unknown state"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /tasks:
    get:
      tags:
      - "Tasks"
      summary: "Returns tasks registered on the task service"
      description: "Returns tasks for the service"
      operationId: "getTasks"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "found task"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    post:
      tags:
        - "Tasks"
      summary: "Starts an instance of the task using the provided identifier"
      description: "Begins execution of of a task"
      operationId: "startTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task source identifier"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "Task accepted"
          schema:
            $ref: "#/definitions/TaskResponse"
        503:
          description: "Task rejected"
          schema:
            $ref: "#/definitions/TaskResponse"
  /tasks/{taskId}:
    get:
      tags:
      - "Tasks"
      summary: "Returns state of a task given its id"
      description: "Returns the information of a task given its id"
      operationId: "getTaskById"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "found task"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    delete:
      tags:
      - "Tasks"
      summary: "Cancel a task"
      description: "Cancels a task if it is running"
      operationId: "cancelTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to cancel"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Task canceled"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
definitions:
  Task:
    properties:
      name:
        type: "string"
        format: "string"
        example: "data model rollover"
      task_id:
        type: "string"
        format: "string"
        example: 4123
      release_id:
        type: "string"
        format: "string"
        example: 2344
      state:
        type: "string"
        format: "string"
        example: "running"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
  TaskState:
    properties:
      state:
        type: "string"
        format: "string"
        example: "running"
  TaskResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Task'
  Release:
    properties:
      release_id:
        type: "integer"
        format: "int64"
        example: 62
      state:
        type: "string"
        format: "string"
        example: "running"
      version:
        type: "string"
        format: "string"
        example: "3.0.0"
      study_id:
        type: "string"
        format: "string"
        example: "ST_00000001"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
  ReleaseResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Release'
  ApiResponse:
    properties:
      _links:
        type: "object"
        properties:
          self:
            type: "string"
            format: "string"
            example: "/resource/{resourceId}"
      _status:
        type: "object"
        properties:
          code:
            type: "integer"
            format: "int32"
            example: 200
          message:
            type: "string"
            format: "string"
            example: "success"
