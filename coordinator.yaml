swagger: "2.0"
info:
  version: "1.0.0"
  title: "Kids First Release Coordinator Service"
  description: |
    The Kids First Release Coordination brings different services in the Kids First ecosystem together to release data in a syncrhonized manner. It consists of two types of services: The Coordinator Service and Task Services.
      
    The coordinator service is responsible for issueing new releases and keeping tabs on progress between the different task services.
    The coordinator implements the spec outlined here so that users and task services may retrieve release information.
    
    ### Release and Task Stages
    
    Releases and tasks share a common lifecycle of states:
    
    - `pending` - The task is queued to begin
    - `running` - The task or release in in progress
    - `staged` - The task or release has compleded necessary processing
    - `publishing` - The task is making the release public
    - `published` - The task or release has completed or released successfully
    - `failed` - The task or release has failed do to some error
    - `canceled` - The task or release was canceled by a user

  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "kids-first.io"
basePath: "/"
tags:
- name: "Releases"
  description: "Operations provided by the coordinating service overseeing a number of tasks"
schemes:
- "http"
paths:
  /status:
    get:
      tags:
        - "Releases"
      summary: "Get information about the service"
      description: "Returns information about the Release Coordinator"
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Releases found"
          schema:
            $ref: "#/definitions/Status"
  /releases:
    get:
      tags:
        - "Releases"
      summary: "Get information about releases"
      description: "Returns information about releases performed by the Release Coordinator"
      operationId: "getReleases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Releases found"
          schema:
            $ref: "#/definitions/ReleaseResponse"
    post:
      tags:
        - "Releases"
      summary: "Create a new release"
      description: |
        The Coordinator will create a new release for the given studies and tag it with an appropriate release version. It will then invoke 
      operationId: "createRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Release started"
          schema:
            $ref: "#/definitions/ReleaseResponse"
  /releases/{releaseId}:
    parameters:
      - name: "releaseId"
        in: "path"
        description: "ID of the release to return"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "Releases"
      summary: "Get detailed information about a release"
      description: "Returns a detailed view of a release performed by the Release Coordinator"
      operationId: "getRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Release found"
          schema:
            $ref: "#/definitions/ReleaseResponse"
        404:
          description: "Release not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
        - "Releases"
      summary: "Cancel a release"
      description: |
        Cancels a release that is pending, running, or staged. If there are pending or running tasks, the coordinator will attempt to stop them. 
      operationId: "cancelRelease"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Release canceled"
          schema:
            $ref: "#/definitions/ApiResponse"
  /releases/{releaseId}/tasks/{taskId}:
    parameters:
    - name: "releaseId"
      in: "path"
      description: "ID of the release the task is in"
      required: true
      type: "string"
      format: "string"
    - name: "taskId"
      in: "path"
      description: "ID of the task to return"
      required: true
      type: "string"
      format: "string"
    get:
      tags:
        - "Releases"
      summary: "Get detailed information about a release"
      description: "Returns a detailed view of a release performed by the Release Coordinator"
      operationId: "getReleaseTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Task found"
          schema:
            $ref: "#/definitions/TaskResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
        - "Releases"
      summary: "Update information about a release's task"
      description: "Used to update the state of a task in a release, typically by the task itself"
      operationId: "updateReleaseTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated state"
        required: true
        schema:
          $ref: "#/definitions/TaskState"
      responses:
        200:
          description: "Task found"
          schema:
            $ref: "#/definitions/TaskResponse"
        400:
          description: "Unknown state"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Task not found"
          schema:
            $ref: "#/definitions/ApiResponse"
definitions:
  Status:
    properties:
      branch:
        description: "API branch name"
        example: "master"
        type: "string"
      code:
        description: "HTTP response code"
        example: 200
        format: "int32"
        type: "integer"
      commit:
        description: "API short commit hash"
        example: "aef3b5a"
        type: "string"
      message:
        description: "status message"
        example: "success"
        type: "string"
      tags:
        items:
          description: "Any tags associated with the version"
          example: "rc"
          type: "string"
        type: "array"
      version:
        description: "API version number"
        example: "2.0.4"
        type: "string"
  Task:
    properties:
      name:
        type: "string"
        format: "string"
        example: "data model rollover"
      task_id:
        type: "string"
        format: "string"
        example: 4123
      release_id:
        type: "string"
        format: "string"
        example: 2344
      state:
        type: "string"
        format: "string"
        example: "running"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
  TaskState:
    properties:
      state:
        type: "string"
        format: "string"
        example: "running"
  TaskResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Task'
  Release:
    properties:
      release_id:
        type: "string"
        format: "string"
        example: "RE_00000001"
      state:
        type: "string"
        format: "string"
        example: "running"
      studies:
        type: "array"
        items:
          type: "string"
          format: "string"
          example: "ST_00000001"
      date_submitted:
        type: "string"
        format: "date"
        example: "2018-03-19T20:12:24.702813+00:00"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
  ReleaseResponse:
    allOf:
    - $ref: '#/definitions/ApiResponse'
    properties:
        results:
          $ref: '#/definitions/Release'
  ApiResponse:
    properties:
      _links:
        type: "object"
        properties:
          self:
            type: "string"
            format: "string"
            example: "/resource/{resourceId}"
      _status:
        type: "object"
        properties:
          code:
            type: "integer"
            format: "int32"
            example: 200
          message:
            type: "string"
            format: "string"
            example: "success"
